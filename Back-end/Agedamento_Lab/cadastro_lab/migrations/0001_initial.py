# Generated by Django 5.2.4 on 2025-08-15 13:30

import cadastro_lab.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ServidorBase',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('tipo', models.CharField(blank=True, choices=[('PROF', 'Professor'), ('TEC', 'Tecnico')], max_length=20, null=True)),
                ('siape', models.CharField(blank=True, max_length=7, primary_key=True, serialize=False, unique=True, validators=[django.core.validators.RegexValidator('^\\d{7}$', 'Digite exatamente 7 dígitos numéricos.')])),
                ('matricula', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('email', models.EmailField(default='email@exemplo.com', max_length=254, unique=True)),
                ('nome', models.CharField(blank=True, max_length=100, null=True)),
                ('cpf', models.CharField(blank=True, max_length=11, null=True, validators=[django.core.validators.RegexValidator('^\\d{11}$', 'O CPF deve conter exatamente 11 dígitos numéricos')], verbose_name='CPF')),
                ('rg', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('data_nascimento', models.DateField(blank=True, null=True, validators=[cadastro_lab.models.ServidorBase.validate_data_nascimento])),
                ('sexo', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Feminino')], max_length=1, null=True)),
                ('estado_civil', models.CharField(blank=True, choices=[('Solteiro', 'Solteiro'), ('Casado', 'Casado'), ('Viuvo', 'Viuvo'), ('Outros', 'Outros')], max_length=20, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='Grupos que este usuário pertence.', related_name='servidorbase_set', to='auth.group', verbose_name='grupos')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Permissões específicas para este usuário.', related_name='servidorbase_set', to='auth.permission', verbose_name='permissões do usuário')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Agendamento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('curso', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('horario_inicio', models.DateTimeField()),
                ('horario_fim', models.DateTimeField()),
                ('atividade', models.CharField(choices=[('E', 'Estudo'), ('T', 'Trabalho Academico'), ('C', 'Cadastro')], default='E', max_length=1)),
                ('status', models.CharField(choices=[('A', 'Aprovado'), ('P', 'Pendente'), ('R', 'Rejeitado')], default='P', max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='Aluno',
            fields=[
                ('cargo', models.CharField(blank=True, choices=[('PROF', 'Professor'), ('COORD', 'Coordenador'), ('DIR', 'Diretor'), ('TEC', 'Técnico Administrativo')], max_length=100, null=True)),
                ('raca', models.CharField(blank=True, choices=[('BRANCA', 'Branca'), ('PRETA', 'Preta'), ('PARDA', 'Parda'), ('AMARELA', 'Amarela'), ('INDIGENA', 'Indígena'), ('NAO_DECLARADO', 'Não declarado')], max_length=50, null=True)),
                ('tipo_sanguineo', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-'), ('ND', 'Não declarado')], max_length=3, null=True)),
                ('telefone', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator('^\\(\\d{2}\\) \\d{5}-\\d{4}$', 'Digite o seu numero no formato (99) 99999-9999')])),
                ('cep', models.CharField(blank=True, max_length=9, null=True, validators=[django.core.validators.RegexValidator('^\\d{5}-\\d{3}$', 'Digite um CEP valido no formato 12345678 ou 12345-678.')])),
                ('n_casa', models.CharField(blank=True, max_length=100, null=True)),
                ('rua', models.CharField(blank=True, max_length=100, null=True)),
                ('bairro', models.CharField(blank=True, max_length=100, null=True)),
                ('municipio', models.CharField(blank=True, max_length=55, null=True)),
                ('nascionalidade', models.CharField(blank=True, max_length=55, null=True)),
                ('passaporte', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator('^[A-Z0-9]{5,15}$', 'Digite um número de passaporte válido, apenas letras e números, sem espaços.')], verbose_name='Passaporte')),
                ('rne', models.CharField(blank=True, max_length=20, null=True)),
                ('matricula', models.CharField(default='TEMP', max_length=20, primary_key=True, serialize=False, unique=True)),
                ('nome', models.CharField(max_length=100)),
                ('nome_pai', models.CharField(max_length=100)),
                ('nome_mae', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('curso', models.CharField(blank=True, choices=[('ADM', 'Administração'), ('INFO', 'Informatica')], max_length=30, null=True)),
                ('ano_ingresso', models.DateField(blank=True, max_length=4, null=True)),
                ('grupo_cota', models.CharField(blank=True, choices=[('Nenhuma', 'Nenhuma'), ('Renda Baixa', 'Renda Baixa'), ('Indígena', 'Indígena'), ('Negro', 'Negro'), ('PNE', 'Pessoa com Necessidade Especial')], max_length=50, null=True)),
                ('forma_ingresso', models.CharField(blank=True, choices=[('INTEGRADO', 'Curso Integrado'), ('SUBSEQUENTE', 'Curso Subsequente'), ('TRANSFERENCIA', 'Transferência Facultativa'), ('Outro', 'Outro')], max_length=20, null=True)),
                ('regime_aluno', models.CharField(blank=True, choices=[('Integral', 'Integral'), ('Parcial', 'Parcial')], max_length=20, null=True)),
                ('escola_anterior', models.CharField(blank=True, max_length=100, null=True)),
                ('ano_conclusao_anterior', models.IntegerField(blank=True, null=True)),
                ('data_nascimento', models.DateField(blank=True, null=True, validators=[cadastro_lab.models.Aluno.validate_data_nascimento])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Laboratorio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_laboratorio', models.CharField(max_length=50)),
                ('n_maquinas', models.PositiveIntegerField(verbose_name='Quantidade de Máquinas')),
            ],
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('servidorbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('cargo', models.CharField(blank=True, choices=[('PROF', 'Professor'), ('COORD', 'Coordenador'), ('DIR', 'Diretor'), ('TEC', 'Técnico Administrativo')], max_length=100, null=True)),
                ('raca', models.CharField(blank=True, choices=[('BRANCA', 'Branca'), ('PRETA', 'Preta'), ('PARDA', 'Parda'), ('AMARELA', 'Amarela'), ('INDIGENA', 'Indígena'), ('NAO_DECLARADO', 'Não declarado')], max_length=50, null=True)),
                ('tipo_sanguineo', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-'), ('ND', 'Não declarado')], max_length=3, null=True)),
                ('telefone', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator('^\\(\\d{2}\\) \\d{5}-\\d{4}$', 'Digite o seu numero no formato (99) 99999-9999')])),
                ('cep', models.CharField(blank=True, max_length=9, null=True, validators=[django.core.validators.RegexValidator('^\\d{5}-\\d{3}$', 'Digite um CEP valido no formato 12345678 ou 12345-678.')])),
                ('n_casa', models.CharField(blank=True, max_length=100, null=True)),
                ('rua', models.CharField(blank=True, max_length=100, null=True)),
                ('bairro', models.CharField(blank=True, max_length=100, null=True)),
                ('municipio', models.CharField(blank=True, max_length=55, null=True)),
                ('nascionalidade', models.CharField(blank=True, max_length=55, null=True)),
                ('passaporte', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator('^[A-Z0-9]{5,15}$', 'Digite um número de passaporte válido, apenas letras e números, sem espaços.')], verbose_name='Passaporte')),
                ('rne', models.CharField(blank=True, max_length=20, null=True)),
                ('area_atuacao', models.CharField(blank=True, choices=[('PORT', 'Português'), ('MAT', 'Matemática'), ('FIS', 'Física'), ('QUI', 'Química'), ('BIO', 'Biologia'), ('HIS', 'História'), ('GEO', 'Geografia'), ('INF', 'Informática'), ('ADM', 'Administração')], max_length=100, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('cadastro_lab.servidorbase', models.Model),
        ),
        migrations.CreateModel(
            name='Tecnico',
            fields=[
                ('servidorbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('cargo', models.CharField(blank=True, choices=[('PROF', 'Professor'), ('COORD', 'Coordenador'), ('DIR', 'Diretor'), ('TEC', 'Técnico Administrativo')], max_length=100, null=True)),
                ('raca', models.CharField(blank=True, choices=[('BRANCA', 'Branca'), ('PRETA', 'Preta'), ('PARDA', 'Parda'), ('AMARELA', 'Amarela'), ('INDIGENA', 'Indígena'), ('NAO_DECLARADO', 'Não declarado')], max_length=50, null=True)),
                ('tipo_sanguineo', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-'), ('ND', 'Não declarado')], max_length=3, null=True)),
                ('telefone', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator('^\\(\\d{2}\\) \\d{5}-\\d{4}$', 'Digite o seu numero no formato (99) 99999-9999')])),
                ('cep', models.CharField(blank=True, max_length=9, null=True, validators=[django.core.validators.RegexValidator('^\\d{5}-\\d{3}$', 'Digite um CEP valido no formato 12345678 ou 12345-678.')])),
                ('n_casa', models.CharField(blank=True, max_length=100, null=True)),
                ('rua', models.CharField(blank=True, max_length=100, null=True)),
                ('bairro', models.CharField(blank=True, max_length=100, null=True)),
                ('municipio', models.CharField(blank=True, max_length=55, null=True)),
                ('nascionalidade', models.CharField(blank=True, max_length=55, null=True)),
                ('passaporte', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator('^[A-Z0-9]{5,15}$', 'Digite um número de passaporte válido, apenas letras e números, sem espaços.')], verbose_name='Passaporte')),
                ('rne', models.CharField(blank=True, max_length=20, null=True)),
                ('setor', models.CharField(max_length=50)),
            ],
            options={
                'abstract': False,
            },
            bases=('cadastro_lab.servidorbase', models.Model),
        ),
    ]
